1. The first question you will have to answer is explaining JS event loop, clarifying the synchronous and asynchronous parts, queues, priority, with examples. Write your answer as if it were for a real interview.

Javascript is a scripting language that conforms to the ECMAScript specification. Since JS is in itself a single threaded language which means it can only do one thing at a time. But even so it may appear that multiple things are happening at once such as while page is loading, a timer may be running and we are scrolling the page. It is due to the way JS event loop is created which prioritizes tasks and adds them to subsequent queues, call stacks and processes these events accordingly. The event loop constantly checks for anything in the macrotask queue or the callback queue and the call stack to see if anything is there. It prioritizes the call stack over callback queue. The task gets added to the callback queue whenever called within a setInterval or setTimeout among others. Otherwise any synchronous task gets added to the call stack. 

Javascript is able to handle code asynchronously through the use of microtask queue and macrotask queue. The macrotask queue is part of the event loop which provides the use of useInterval and useTimeout to pass functions to run asynchronously after the synchronous code is executed. The microtask queue falls outside of the event loop and is part of the JS Web API, and this is implemented differently by every browser. Chromium based browsers use the V8 engine. The tasks in microtask queue are given more priority over macrotask queue or the callback queue. Since the microtask added inside of a microtask added are also given more priority than any macrotask. So they can execute in sequeunce maintaining a proper flow or sequence. 


2. The follow up question is how may we convert a sync operation/function to become asynchronous?

Any synchronous operation can be made asynchronous either by wrapping it inside a setInterval or setTimeout. The other way could be wrapping the function inside a promise and calling the resolve or reject async operation provided by the callback inside promise method to resolve or reject results. The other way is to use async function which when used wraps the returned object inside of a promise. Which creates asynchronous code. 
